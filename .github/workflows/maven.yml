name: Build JavaFX App for Multiple Platforms

on:
  push:
    branches:
      - main
      - release
      - dev
  pull_request:
    branches:
      - main
      - release
      - dev

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository # Linux
            C:\Users\runneradmin\.m2\repository # Windows
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build the JAR with Maven (includes JavaFX libraries using shade plugin)
      - name: Build with Maven
        run: mvn clean package -Drevision=${{ github.sha }} -Dbranch=${{ github.ref_name }}

      # Windows-specific step to package the JAR as an EXE using jpackage
      - name: Package as EXE with jpackage (Windows only)
        if: runner.os == 'Windows'
        run: |
          jpackage `
            --input target `
            --main-jar graham-scan-${{ github.sha }}-${{ github.ref_name }}.jar `
            --name GrahamScan `
            --win-console `
            --type exe `
            --app-version 0.0.1 `
            --main-class org.prolific.dev.App `
            --module-path C:\Users\runneradmin\.m2\repository\org\openjfx\javafx-controls\17.0.12\javafx-controls-17.0.12.jar;C:\Users\runneradmin\.m2\repository\org\openjfx\javafx-graphics\17.0.12\javafx-graphics-17.0.12.jar;C:\Users\runneradmin\.m2\repository\org\openjfx\javafx-base\17.0.12\javafx-base-17.0.12.jar;C:\Users\runneradmin\.m2\repository\org\openjfx\javafx-fxml\17.0.12\javafx-fxml-17.0.12.jar `
            --add-modules javafx.controls,javafx.fxml,javafx.graphics,javafx.base

      # Upload JAR artifact (Linux and Windows)
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: Graham-Scan-JAR-${{ runner.os }}
          path: target/graham-scan-${{ github.sha }}-${{ github.ref_name }}.jar

      # Upload EXE artifact (Windows only)
      - name: Upload EXE artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: Graham-Scan
          path: GrahamScan-0.0.1.exe
